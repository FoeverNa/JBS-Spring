<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 트랜잭션 자동 설정 -->
	<!-- transactionManager 등록 
	TransactionManager는 데이터베이스 연동 기술에 따라 다른 클래스를 등록해야 한다.
	예를 들어 Hibernate를 이용하여 DAO 클래스를 구현했다면 HibernatTranscationManager를 등록해야 한다.
	그리고 모든 TransactionManager 클래스들은 FlatformTransactionManager 인터페이스를 구현하고 있다.
	-->
	
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--  트랜잭션 Advice 클래스 등록 
	tx 접두사로 시작하는 태그를 적절히 설정하면 스프링 컨테이너가 자동으로 트랜잭션 관리 Advice 객체를 생성해준다.
	유일하게 트랜잭션 관리 Advice 클래스만 우리가 구현하지 않는다.
	-->
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 
	비지니스 메소드(XXXServiceImpl)와 txAdvice를 연결하기 위한 AOP설정
	주의사항: 트랜잭션 AOP 설정에서는 aspect 태그 대신 advisor 태그를 사용한다
	 -->
	 
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.rubypaper.biz..*Impl.*(..))" />
		
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	
	
</beans>











